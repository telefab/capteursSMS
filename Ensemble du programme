// Modifier Buffer Arduino : dans un terminal entrer la commande : sudo vi /usr/share/arduino/libraries/SoftwareSerial/SoftwareSerial.h
// puis touche "ENTREE"
// modifier la valeur de MAX_RX_BUFF à 256
// q:q! pour quitter et enregistrer

#include <OneWire.h>
#include <SoftwareSerial.h>

#define DS18B20 0x28
#define BROCHE_ONEWIRE 7
#define SEUIL_BAS 15.0
#define SEUIL_HAUT 25.0

// Variables capteurs
OneWire ds(BROCHE_ONEWIRE);
byte adresseCapteur1 [8];           // Adresse du premier capteur
float temperatureCapteur1=20.0;
boolean intervalleCapteur1=true;

// Variables GSM
SoftwareSerial GPRS(7,8);           // GPRS : relatif au module GSM ; Serial : relatif à l'ordinateur
int ledGSM = 13;
int onModulePin = 9;                // the pin to switch on the module (without press on button)
char phone_number[]="+33647877083"; // ********* is the number to call



void getTemperature (float *temp, const byte addr[])
{
    byte data[2];

    ds.reset();
    ds.select(addr);                // Sélectionne le capteur de température

    ds.write(0x44,1);               // Lance la mesure de température
    delay(800);
    
    ds.reset();                     // Reset pour envoyer maintenant la demande de lecture
    ds.select(addr);
    ds.write(0xBE);                 // Demande de lecture du scratchpad

    data[0] = ds.read();            // Lit les 2 premiers octets du scratchpad sur lesquels est contenue la température
    data[1] = ds.read();
    *temp = ((data[1] << 8) | data[0]) * 0.0625; // Conversion en degrés celsius
}

void switchGSMModule()
{
    digitalWrite(onModulePin,HIGH);
    delay(2100);
    digitalWrite(onModulePin,LOW);
}

void envoyerUnMessage(const float temp, const boolean intervalle)       // "intervalle" sert a différencier si est rentré ou sorti de l'intervalle de température
{
    switchGSMModule();                                      // switches the GSM module ON
    delay(500);
    GPRS.print("AT+CPIN=\"0000\"\r\n");                     // Entrer le code PIN
    delay(10000);                                           // Attente de l'établissement du réseau
  
    GPRS.print("AT+CMGF=1\r\n");                            // Sets the SMS mode to text
    delay(1600);

    GPRS.print("AT+CMGS=\"");                               // Send the SMS number
    GPRS.print(phone_number);
    GPRS.print("\"\r\n");
    while(GPRS.read()!='>');
    if (!intervalle)                                        // SMS body, deux possibilités
    {
        GPRS.print("Attention, le seuil critique de temperature ");
        GPRS.print("dans le capteur 1 a ete atteint. La temperature");
        GPRS.print(" est de ");
    }
    else
    {
        GPRS.print("La temperature est de nouveau acceptable. Elle est de ");
    }
    GPRS.print(temp, 2);
    GPRS.print(" degres celsius.");                         // Fin SMS body

    delay(500);
    GPRS.write(0x1A);                                       // Sends ++
    GPRS.write(0x0D);
    GPRS.write(0x0A);
    
    delay(10000);
    switchGSMModule();                                      // Switch OFF module GSM
}

void setup()
{
    // Setup Capteurs
    Serial.begin(9600);                                     // Initialisation du port série
    ds.reset();
    ds.search(adresseCapteur1);                             // Recherche et stock l'adresse du capteur 1

    // Setup GSM
    gprs.begin(19200);                                      // UART baud GSM rate
    delay(100);
    pinMode(ledGSM, OUTPUT);
    pinMode(onModulePin, OUTPUT);
}

void loop ()
{
    getTemperature (&temperatureCapteur1, adresseCapteur1);                                                 // Demande la température du capteur 1


    if (intervalleCapteur1 & ((temperatureCapteur1 < SEUIL_BAS) | (temperatureCapteur1 > SEUIL_HAUT)))      // On sort de l'intervalle acceptable 
    {
        delay (60000);                                                                                      // Attente d'une minute
        getTemperature (&temperatureCapteur1, adresseCapteur1);
        if ((temperatureCapteur1 < SEUIL_BAS) | (temperatureCapteur1 > SEUIL_HAUT))                         // Seconde vérification
        {
            envoyerUnMessage (temperatureCapteur1,false);
            intervalleCapteur1=false;
        }
    }
    else if (!intervalleCapteur1 & (temperatureCapteur1 > SEUIL_BAS) & (temperatureCapteur1 < SEUIL_HAUT))   // On rentre à nouveau dans cet intervalle
    {
        delay (60000);                                                                                      // Attente d'une minute
        getTemperature (&temperatureCapteur1, adresseCapteur1);
        if ((temperatureCapteur1 > SEUIL_BAS) & (temperatureCapteur1 < SEUIL_HAUT))                         // Seconde vérification
        {
            envoverUnMessage (temperatureCapteur1,true);
            intervalleCapteur1=true;
        }
    }

    delay (600000);                                                                                         // Attends 10 min avant de recommencer
}

